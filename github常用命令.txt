git init(初始化本地项目)
{
$ ssh-keygen -t rsa -C "your_email@youremail.com"（在本地创建ssh key）
$ ssh -T git@github.com（验证本地创建ssh key是否成功）
设置username和email，因为github每次commit都会记录他们
$ git config --global user.name "your name"
$ git config --global user.email "your_email@youremail.com
}
git add .(将所有文件添加到仓库)
git commit -m "提交文件"(双引号内是提交注释)
git remote add origin `仓库地址`(关联github仓库)
git push -u origin master（上传本地代码）


git status(时刻掌握仓库当前的状态)
git diff 文件名 （查看已提交文件与修改后的差异）
$ git reset --hard HEAD^ （返回上一个版本）
git reset --hard `版本commit id`（回退到某一个版本）
git reflog（记录你输入的每一次命令）
git checkout -- file可以丢弃工作区的修改
git reset HEAD file可以把暂存区的修改撤销掉
git rm file从版本库中删除该文件
{
$ git checkout -b dev（创建dev分支，然后切换到dev分支：）
-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
}
$ git branch（查看当前分支）
git merge（用于合并指定分支到当前分支）
$ git branch -d dev（删除dev分支）

$ git merge --no-ff -m "merge with no-ff" dev（--no-ff参数，表示禁用Fast forward）

Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>


git stash(把当前工作现场“储藏”起来，等以后恢复现场后继续工作)
Git把stash内容存在某个地方了，重新使用需要恢复一下，有两个办法：

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了。

git stash list（查看工作现场）


如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。



多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。





小结

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。